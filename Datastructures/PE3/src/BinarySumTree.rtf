{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red196\green26\blue22;\red170\green13\blue145;\red28\green0\blue207;
\red0\green116\blue0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 binaryTreeSum\
main :\
\pard\tx529\pardeftab529\pardirnatural

\f1\fs22 \cf0 \CocoaLigature0 cout << \cf2 "testSumOfKeys by YourFirstName"\cf0  << endl;\
\
	bSearchTreeType<\cf3 int\cf0 >  tree;\
	\
	\cf3 int\cf0  i, input[LENGTH] = \{\cf4 11\cf0 , \cf4 7\cf0 , \cf4 10\cf0 , \cf4 8\cf0 , \cf4 6\cf0 , \cf4 5\cf0 , \cf4 9\cf0 , \cf4 13\cf0 \};\
\
	\cf3 for\cf0  (i = \cf4 0\cf0 ; i < LENGTH; ++i) tree.insert(input[i]);\
\
	cout << endl << \cf2 "Tree nodes in inorder: "\cf0 ;\
	tree.inorderTraversal();\
	cout << endl;\
\
	cout << \cf2 "sum of keys of all nodes = "\cf0  << tree.sumOfKeys(ALL_LEVEL) << endl;\
	cout << \cf2 "sum of keys of odd-level nodes = "\cf0  << tree.sumOfKeys(ODD_LEVEL) << endl;\
	cout << \cf2 "sum of keys of even-level nodes = "\cf0  << tree.sumOfKeys(EVEN_LEVEL) << endl;\
\
	cout << endl << \cf2 "***over***"\cf0  << endl;\
\
	\cf3 return\cf0  \cf4 0\cf0 ;\
==================================================================\
binaryTreeSum:\
\cf3 template\cf0  <\cf3 class\cf0  elemType>\
elemType binaryTreeType<elemType>::sumOfKeys(\cf3 int\cf0  nodeType) \cf3 const\cf0 \
\{\
	assert(nodeType == ALL_LEVEL || nodeType == ODD_LEVEL || nodeType == EVEN_LEVEL);\
\
	\cf5 // start at root at level 0\cf0 \
	\cf3 return\cf0  recSumOfKeys(root, \cf4 0\cf0 , nodeType);\
\} \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\cf3 template\cf0  <\cf3 class\cf0  elemType>\
elemType binaryTreeType<elemType>::recSumOfKeys(binaryTreeNode<elemType>* nodePtr, \cf3 int\cf0  level, \cf3 int\cf0  nodeType) \cf3 const\cf0 \
\{\
	\cf3 if\cf0  (nodePtr == \cf3 NULL\cf0 )\
		\cf3 return\cf0  \cf4 0\cf0 ;\
\
	elemType v = \cf4 0\cf0 ;\
	\cf3 if\cf0  ((nodeType == ALL_LEVEL) ||\
		((nodeType == ODD_LEVEL) && (level % \cf4 2\cf0  == \cf4 1\cf0 )) ||\
		((nodeType == EVEN_LEVEL) && (level % \cf4 2\cf0  == \cf4 0\cf0 ))\
		) \{\
		v = nodePtr->info;\
	\}\
\
	\cf3 return\cf0  v + recSumOfKeys(nodePtr->llink, level + \cf4 1\cf0 , nodeType) + recSumOfKeys(nodePtr->rlink, level + \cf4 1\cf0 , nodeType);\
\
\} }