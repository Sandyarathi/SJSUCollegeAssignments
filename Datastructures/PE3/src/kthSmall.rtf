{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red28\green0\blue207;\red196\green26\blue22;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 kthSmallestElement:\
================\
\
\pard\tx529\pardeftab529\pardirnatural

\f1\fs22 \cf2 \CocoaLigature0 void\cf0  printListInfo(arrayListType<\cf2 int\cf0 >& listInfo);\
\
\cf2 int\cf0  list[SIZE] = \{\cf3 34\cf0 , \cf3 77\cf0 , \cf3 26\cf0 , \cf3 51\cf0 , \cf3 39\cf0 , \cf3 8\cf0 , \cf3 12\cf0 , \cf3 67\cf0 , \cf3 4\cf0 , \cf3 98\cf0 , \cf3 123\cf0 , \cf3 10\cf0 , \cf3 42\cf0 \};\
\
\cf2 int\cf0  main()\
\{\
	arrayListType<\cf2 int\cf0 > intList;\
	\cf2 int\cf0  num;\
	\cf2 int\cf0  position;\
\
\
	\cf2 for\cf0  (\cf2 int\cf0  i = \cf3 0\cf0 ; i < SIZE; ++i) \{\
		intList.insert(list[i]);\
	\}\
\
	cout << \cf4 "The list is: "\cf0  << endl;\
	printListInfo(intList);\
\
	intList.kThSmallestItem(\cf3 11\cf0 , num);\
	cout << \cf4 "The 11th element = "\cf0  << num << endl;\
\
	intList.kThSmallestItem(\cf3 3\cf0 , num);\
	cout << \cf4 "The 3rd element = "\cf0  << num << endl;\
\
	intList.kThSmallestItem(\cf3 7\cf0 , num);\
	cout << \cf4 "The 7th element = "\cf0  << num << endl;\
\
	\cf2 return\cf0  \cf3 0\cf0 ;\
\}\
\
\cf2 void\cf0  printListInfo(arrayListType<\cf2 int\cf0 >& list)\
\{\
	cout << \cf4 "List: "\cf0 ;\
	list.print();\
\
	cout << \cf4 "List Size: "\cf0  << list.listSize() << endl;\
\}\
===============================\
\cf2 template\cf0 <\cf2 class\cf0  elemType>\
\cf2 void\cf0  arrayListType<elemType>::kThSmallestItem(\cf2 int\cf0  position, elemType& item)\
\{\
	kThRecSmallItem(position, item, \cf3 0\cf0 , length - \cf3 1\cf0 );\
\}\
\
\cf2 template\cf0 <\cf2 class\cf0  elemType>\
\cf2 void\cf0  arrayListType<elemType>::kThRecSmallItem(\cf2 int\cf0  position, elemType& item, \cf2 int\cf0  first, \cf2 int\cf0  last)\
\{\
	\cf2 int\cf0  pivotLocation;\
	\cf2 bool\cf0  found = \cf2 false\cf0 ;\
\
	\cf2 if\cf0  (first <= last && !found) \{\
		pivotLocation = partition(first, last);\
\
		\cf2 if\cf0  (pivotLocation == position)\
			item = list[pivotLocation];\
		\cf2 else\cf0  \cf2 if\cf0  (position < pivotLocation)\
            kThRecSmallItem(position, item, first, pivotLocation - \cf3 1\cf0 );\
        \cf2 else\cf0 \
            kThRecSmallItem(position, item, pivotLocation + \cf3 1\cf0 , last);\
	\}\
\}}